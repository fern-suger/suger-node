/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { SugerApi } from "@fern-api/suger";
import * as core from "../../../../core";

export const UsageBatchEventOkMessage: core.serialization.ObjectSchema<
    serializers.UsageBatchEventOkMessage.Raw,
    SugerApi.UsageBatchEventOkMessage
> = core.serialization.object({
    dimension: core.serialization.string().optional(),
    effectiveStartTime: core.serialization.string().optional(),
    error: core.serialization.lazyObject(async () => (await import("../../..")).UsageEventConflictResponse).optional(),
    messageTime: core.serialization.string().optional(),
    planId: core.serialization.string().optional(),
    quantity: core.serialization.number().optional(),
    resourceId: core.serialization.string().optional(),
    resourceUri: core.serialization.string().optional(),
    status: core.serialization.string().optional(),
    usageEventId: core.serialization.string().optional(),
});

export declare namespace UsageBatchEventOkMessage {
    interface Raw {
        dimension?: string | null;
        effectiveStartTime?: string | null;
        error?: serializers.UsageEventConflictResponse.Raw | null;
        messageTime?: string | null;
        planId?: string | null;
        quantity?: number | null;
        resourceId?: string | null;
        resourceUri?: string | null;
        status?: string | null;
        usageEventId?: string | null;
    }
}
