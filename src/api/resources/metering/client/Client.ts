/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { SugerApi } from "@fern-api/suger";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.SugerApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    public async getUsageRecordGroupsForEntitlement(
        orgId: string,
        entitlementId: string,
        request?: SugerApi.GetUsageRecordGroupsForEntitlementRequest
    ): Promise<SugerApi.ListUsageRecordGroupsResponse> {
        const _queryParams = new URLSearchParams();
        if (request?.limit != null) {
            _queryParams.append("limit", request?.limit.toString());
        }

        if (request?.offset != null) {
            _queryParams.append("offset", request?.offset.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/entitlement/${entitlementId}/usageRecordGroup`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.metering.getUsageRecordGroupsForEntitlement.Response.parse(
                _response.body as serializers.metering.getUsageRecordGroupsForEntitlement.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * It is recommended to provide the ID in the request body CreateUsageRecordGroupParams, so the report can be deduplicated. All duplicate report will return error code 409.
     */
    public async reportUsageRecordGroup(
        orgId: string,
        entitlementId: string,
        request: SugerApi.CreateUsageRecordGroupParams
    ): Promise<SugerApi.MeteringUsageRecordGroup> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/entitlement/${entitlementId}/usageRecordGroup`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.metering.reportUsageRecordGroup.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.metering.reportUsageRecordGroup.Response.parse(
                _response.body as serializers.metering.reportUsageRecordGroup.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getUsageRecordReportsForEntitlement(
        orgId: string,
        entitlementId: string,
        request?: SugerApi.GetUsageRecordReportsForEntitlementRequest
    ): Promise<SugerApi.ListUsageRecordReportsResponse> {
        const _queryParams = new URLSearchParams();
        if (request?.entitlementTermId != null) {
            _queryParams.append("entitlementTermId", request?.entitlementTermId);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/entitlement/${entitlementId}/usageRecordReport`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.metering.getUsageRecordReportsForEntitlement.Response.parse(
                _response.body as serializers.metering.getUsageRecordReportsForEntitlement.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getUsageRecordGroupsForProduct(
        orgId: string,
        productId: string,
        request?: SugerApi.GetUsageRecordGroupsForProductRequest
    ): Promise<SugerApi.ListUsageRecordGroupsResponse> {
        const _queryParams = new URLSearchParams();
        if (request?.limit != null) {
            _queryParams.append("limit", request?.limit.toString());
        }

        if (request?.offset != null) {
            _queryParams.append("offset", request?.offset.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/product/${productId}/usageRecordGroup`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.metering.getUsageRecordGroupsForProduct.Response.parse(
                _response.body as serializers.metering.getUsageRecordGroupsForProduct.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getUsageRecordGroupsForOrganization(
        orgId: string,
        request?: SugerApi.GetUsageRecordGroupsForOrganizationRequest
    ): Promise<SugerApi.ListUsageRecordGroupsResponse> {
        const _queryParams = new URLSearchParams();
        if (request?.limit != null) {
            _queryParams.append("limit", request?.limit.toString());
        }

        if (request?.offset != null) {
            _queryParams.append("offset", request?.offset.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/usageRecordGroup`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.metering.getUsageRecordGroupsForOrganization.Response.parse(
                _response.body as serializers.metering.getUsageRecordGroupsForOrganization.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async getUsageRecordGroupById(
        orgId: string,
        usageRecordGroupId: string
    ): Promise<SugerApi.MeteringUsageRecordGroup> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.SugerApiEnvironment.Production,
                `/org/${orgId}/usageRecordGroup/${usageRecordGroupId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.metering.getUsageRecordGroupById.Response.parse(
                _response.body as serializers.metering.getUsageRecordGroupById.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SugerApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SugerApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SugerApiTimeoutError();
            case "unknown":
                throw new errors.SugerApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
